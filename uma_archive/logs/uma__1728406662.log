fn get_local_ip_addresses() -> std::io::Result<()> {
Interface: lo
  Address: 127.0.0.1
  Netmask: 255.0.0.0
  Flags: InterfaceFlags(UP | RUNNING | LOOPBACK)
  Status: Up

fn get_local_ip_addresses() -> std::io::Result<()> {
Interface: enp2s0
  Address: 10.0.0.198
  Netmask: 255.255.255.0
  Flags: InterfaceFlags(UP | RUNNING | BROADCAST | MULTICAST)
  Status: Up

fn get_local_ip_addresses() -> std::io::Result<()> {
Interface: wlp0s20f3
  Address: 10.0.0.22
  Netmask: 255.255.255.0
  Flags: InterfaceFlags(UP | RUNNING | BROADCAST | MULTICAST)
  Status: Up

fn get_local_ip_addresses() -> std::io::Result<()> {
Interface: lo
  Address: ::1
  Netmask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
  Flags: InterfaceFlags(UP | RUNNING | LOOPBACK)
  Status: Up

fn get_local_ip_addresses() -> std::io::Result<()> {
Interface: enp2s0
  Address: 2601:80:4803:9490::2e79
  Netmask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
  Flags: InterfaceFlags(UP | RUNNING | BROADCAST | MULTICAST)
  Status: Up

fn get_local_ip_addresses() -> std::io::Result<()> {
Interface: enp2s0
  Address: 2601:80:4803:9490:8e3a:faf:4dbd:de1d
  Netmask: ffff:ffff:ffff:ffff::
  Flags: InterfaceFlags(UP | RUNNING | BROADCAST | MULTICAST)
  Status: Up

fn get_local_ip_addresses() -> std::io::Result<()> {
Interface: enp2s0
  Address: fe80::dc16:a86e:4978:8468
  Netmask: ffff:ffff:ffff:ffff::
  Flags: InterfaceFlags(UP | RUNNING | BROADCAST | MULTICAST)
  Status: Up

fn get_local_ip_addresses() -> std::io::Result<()> {
Interface: wlp0s20f3
  Address: 2601:80:4803:9490::1d46
  Netmask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
  Flags: InterfaceFlags(UP | RUNNING | BROADCAST | MULTICAST)
  Status: Up

fn get_local_ip_addresses() -> std::io::Result<()> {
Interface: wlp0s20f3
  Address: 2601:80:4803:9490:875a:cb9c:2489:8fe3
  Netmask: ffff:ffff:ffff:ffff::
  Flags: InterfaceFlags(UP | RUNNING | BROADCAST | MULTICAST)
  Status: Up

fn get_local_ip_addresses() -> std::io::Result<()> {
Interface: wlp0s20f3
  Address: fe80::1280:3060:5df8:70b5
  Netmask: ffff:ffff:ffff:ffff::
  Flags: InterfaceFlags(UP | RUNNING | BROADCAST | MULTICAST)
  Status: Up

Old 'continue_uma.txt' file deleted.
let number_of_team_channels = fs::read_dir(&team_channels_dir)
if !dir_at_path_is_empty_returns_false(Path::new(project_graph_data/collaborator_files)) { 
dir_at_path_is_empty_returns_false()-> Checking if directory is empty: "project_graph_data/collaborator_files"
Old 'continue_uma.txt' file deleted.
start loop: we_love_projects_loop()

Starting UMA Sync Team Office for 
alice
 if app.input_mode == InputMode::Command
tiny_tui::render_list(&app.tui_directory_list, &app.current_path)
fn handle_command(), input->"1"
 'other' commend? _ => {...
end fn handle_command()
main: if item_index < app.tui_directory_list.len()
main: app.tui_directory_list: ["teamtest"]
handle_tui_action() started in we_love_projects_loop()
app.current_path == project_graph_data/team_channels
current_path: "project_graph_data/team_channels"
end handle_tui_action()
start loop: we_love_projects_loop()
 if app.input_mode == InputMode::Command
tiny_tui::render_list(&app.tui_directory_list, &app.current_path)
fn handle_command(), input->"m"
m selected
app.current_path "project_graph_data/team_channels"
app.current_path after joining 'instant_message_browser': "project_graph_data/team_channels/instant_message_browser"
load_im_messages called
self.current_path  "project_graph_data/team_channels/instant_message_browser"
end fn handle_command()
start loop: we_love_projects_loop()
tiny_tui::render_list(&app.tui_textmessage_list, &app.current_path);
handle_insert_text_input
!input.is_empty()
Next message path: "project_graph_data/team_channels/instant_message_browser/1__alice.toml"
parent directory  "project_graph_data/team_channels/instant_message_browser"
Start!
Staring initialize_uma_application()
